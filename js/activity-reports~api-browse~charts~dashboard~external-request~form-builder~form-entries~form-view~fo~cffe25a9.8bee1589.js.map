{"version":3,"sources":["webpack:///./node_modules/lodash-es/memoize.js","webpack:///./node_modules/lodash-es/_memoizeCapped.js","webpack:///./node_modules/lodash-es/_stringToPath.js","webpack:///./node_modules/lodash-es/_castPath.js","webpack:///./node_modules/lodash-es/_hasPath.js","webpack:///./src/components/common/render-form/RenderForm.vue","webpack:///./node_modules/lodash-es/_baseHas.js","webpack:///./node_modules/lodash-es/has.js","webpack:///src/components/common/render-form/RenderForm.vue","webpack:///./src/components/common/render-form/RenderForm.vue?d350","webpack:///./src/components/common/render-form/RenderForm.vue?c7a6","webpack:///./node_modules/lodash-es/_toKey.js","webpack:///./src/components/common/render-form/RenderForm.vue?6bc2","webpack:///./node_modules/lodash-es/_isKey.js"],"names":["FUNC_ERROR_TEXT","memoize","func","resolver","TypeError","memoized","args","arguments","key","apply","this","cache","has","get","result","set","Cache","MAX_MEMOIZE_SIZE","memoizeCapped","size","clear","rePropName","reEscapeChar","stringToPath","string","charCodeAt","push","replace","match","number","quote","subString","castPath","value","object","isArray","hasPath","path","hasFunc","index","length","render","_vm","_c","_self","attrs","formSettings","general","layout","staticClass","activePanel","_tabs","on","changePanelTab","_e","style","height","ref","_l","_panels","panel","checkVisibility","id","formId","settings","title","description","fields","formControls","_fieldsModel","secondaryPanels","noPadding","isReadonly","formEditControls","readonlyControls","formVisibilityAccess","formSecureControls","checkEditControls","enableControls","visibleControls","dataValidationValues","formUploadFiles","ocrResult","externalLink","portalId","$event","setMandatoryControls","uploadFiles","deletedFiles","setReadonlyControls","formSaveType","externalLoading","showQr","workflowFormModel","previous","panelCount","checkNextAction","next","type","save","workflowActions","action","processSave","isPreview","staticRenderFns","objectProto","Object","prototype","hasOwnProperty","baseHas","call","name","components","Tabs","ValidationObserver","mixins","props","default","required","panels","formModel","saveAction","checkList","formFields","formCheckList","hasCheckFormValidate","data","fieldsModel","calculatedFieldsModel","mandatoryControls","mandatoryControlsList","readonlyControlsList","computed","item","tabList","label","_formModel","model","field","row","parentControls","forEach","control","panelsCount","watch","immediate","deep","handler","filledValue","nonFilledValue","proceed","calculation","calcValue","console","proceedPanel","currentPanel","nonFilledId","validation","errorList","origin","created","methods","isJsonString","JSON","singleEditControl","hasEmail","formfields","slice","reverse","isArrayField","fieldType","isStatelessField","checkDocument","doc","conditionValue","fieldValue","documentValidation","attachDocs","controls","panelIndex","fieldsIndex","fieldId","element","fieldRule","removeTags","visibility","component","INFINITY","toKey","reIsDeepProp","reIsPlainProp","isKey","test"],"mappings":"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QACAtG,UAEA,eACA,mCAIA,4CACA,yCAEAqG,QACAxE,mBACAyE,QACAtG,UAEA,eACA,kCAIA,CACA,yCAEAqG,QACAxE,mBACAyE,QACAtG,UAEA,eACA,gCAKA,GAGA0B,UACA,mDACA,YAEA,iCAGAU,eACA,oEAGAmE,aACA,SACA,mBACA,oCACA,uBACA,OAGA,wBACA,mBASA,sBACA,mCACA,6BACA,wBACA,IACAC,yCACA,SACAA,kCAGAA,eAGAC,oBACAA,sBAEAD,qCAEAA,iCAOA,wBACA,yCACA,qCACA,6CACAE,gBAEA,MACA,6BACApG,GACAqG,eAAAC,QAAAC,IACA,gCACA,wBACA,6BACA,uBAaA,+BAEA,SAIA,UAGA/C,aACA,QAwBA,OAvBA,wBAIA,kCACA,iDACA,mCACAsC,4CAEA,yBACA,8BACAU,YAIA,yCACAA,WAIAA,OAGA,IAIAC,OACAjB,aACAkB,aACAC,QACAC,UACA,qBACA,gCACA,wBACA,sCAEA,QACA,IACA,8BACA,4BAEAL,8CACAA,0CAEA,gDACA,uCACA,+BACAM,KAEAC,KAEA,oCACA,yCACAD,KAEAC,KAEA,wBACAD,KAEAC,QAMA,4BACAD,cACAC,kBAEA,+DACA,kBACA,SACA,wBACAC,KACA,4BACA,gBACA,uBACA,qCACAA,MAEA,OAIA,MACA,SACA,wBACA,mBAGA,sBACAnF,YAGA,uBACA,iBACA,4CACA,qBACAoF,UACA,iBACApF,GAGA,sBACA,sCACAqF,oCAUA,wBACA,yCACA,wBACA,SACA,KACA,wBACA,OACA,mDACA,wBACA,wCACAC,kBACA,wBACAC,QAGA,wBACAA,OAGA,0CACAC,WAQAzG,aACA+F,aACAC,QACAC,UACA,wBACA,yCACA,wBACA,SACA,KACA,wBACA,OACA,mDACA,wBACA,wCACAM,kBACA,wBACAC,QAGA,wBACAA,OAGA,0CACAC,WAQAlC,YACAwB,aACA,gBACA,oBACA,6DAEA,YADA,yDAIA,SACA,KAEA,4BACA,+BACA,+CACA,6BACAI,gBACAO,oBAOA,SAkBA,GAhBAA,cACA,GACA,4BACA,4BACA,UAGA,O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","file":"js/activity-reports~api-browse~charts~dashboard~external-request~form-builder~form-entries~form-view~fo~cffe25a9.8bee1589.js","sourcesContent":["import MapCache from './_MapCache.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nexport default memoize;\n","import memoize from './memoize.js';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nexport default memoizeCapped;\n","import memoizeCapped from './_memoizeCapped.js';\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nexport default stringToPath;\n","import isArray from './isArray.js';\nimport isKey from './_isKey.js';\nimport stringToPath from './_stringToPath.js';\nimport toString from './toString.js';\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nexport default castPath;\n","import castPath from './_castPath.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isIndex from './_isIndex.js';\nimport isLength from './isLength.js';\nimport toKey from './_toKey.js';\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nexport default hasPath;\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"render-form\"}},[(_vm.formSettings.general.layout === 'TAB')?_c('Tabs',{staticClass:\"q-mb-lg\",attrs:{\"value\":_vm.activePanel,\"tabs\":_vm._tabs},on:{\"input\":_vm.changePanelTab}}):_vm._e(),_c('BaseScrollbar',{style:(_vm.height ? 'max-height:' + _vm.height : '')},[_c('ValidationObserver',{ref:\"form\"},[_vm._l((_vm._panels),function(panel){return [(_vm.checkVisibility(panel.id))?_c('RenderPanel',{key:panel.id,staticClass:\"q-mb-md\",attrs:{\"form-id\":_vm.formId,\"title\":panel.settings.title,\"description\":panel.settings.description,\"fields\":panel.fields,\"form-controls\":_vm.formControls,\"fields-model\":_vm._fieldsModel,\"secondary-panels\":_vm.secondaryPanels,\"form-settings\":_vm.formSettings,\"no-padding\":_vm.noPadding,\"is-readonly\":_vm.isReadonly,\"form-edit-controls\":_vm.formEditControls,\"readonly-controls\":_vm.readonlyControls,\"form-visibility-access\":_vm.formVisibilityAccess,\"form-secure-controls\":_vm.formSecureControls,\"edit-panel-controls\":_vm.checkEditControls(panel.id),\"enable-controls\":_vm.enableControls,\"visible-controls\":_vm.visibleControls,\"data-validation-values\":_vm.dataValidationValues,\"form-upload-files\":_vm.formUploadFiles,\"ocr-result\":_vm.ocrResult,\"external-link\":_vm.externalLink,\"portal-id\":_vm.portalId,\"form-view\":_vm.formSettings.general.layout},on:{\"update:visibleControls\":function($event){_vm.visibleControls=$event},\"update:visible-controls\":function($event){_vm.visibleControls=$event},\"mandatoryControls\":_vm.setMandatoryControls,\"uploadFiles\":_vm.uploadFiles,\"deletedFiles\":_vm.deletedFiles,\"setReadonlyControls\":_vm.setReadonlyControls,\"formSaveType\":_vm.formSaveType,\"loading\":_vm.externalLoading,\"showQr\":_vm.showQr}}):_vm._e()]})],2)],1),(!_vm.isReadonly || _vm.formSettings.general.layout === 'CARD')?[(_vm.formSettings.general.layout === 'CARD')?_c('div',{staticClass:\"actions\",style:(_vm.workflowFormModel ? ' justify-content: center' : '')},[(_vm.activePanel !== 0)?_c('BaseButton',{staticClass:\"q-mr-sm\",attrs:{\"label\":\"previous\",\"is-flat\":\"\"},on:{\"click\":_vm.previous}}):_vm._e(),(_vm.activePanel !== _vm.panelCount - 1 && _vm.checkNextAction)?_c('BaseButton',{staticClass:\"q-mr-md\",attrs:{\"label\":\"next\"},on:{\"click\":_vm.next}}):_vm._e(),(\n          _vm.activePanel === _vm.panelCount - 1 &&\n          _vm.formSettings.general.type !== 'WORKFLOW'\n        )?[_c('BaseButton',{attrs:{\"label\":\"save\"},on:{\"click\":_vm.save}})]:(\n          _vm.activePanel === _vm.panelCount - 1 &&\n          _vm.formSettings.general.type === 'WORKFLOW'\n        )?[_vm._l((_vm.workflowActions),function(action){return [_c('BaseButton',{key:action,attrs:{\"label\":action},on:{\"click\":function($event){return _vm.processSave(action)}}})]})]:_vm._e()],2):_c('div',[(_vm.formSettings.general.type === 'WORKFLOW')?[(_vm.workflowActions.length)?_c('div',{staticClass:\"actions\"},[_vm._l((_vm.workflowActions),function(action){return [_c('BaseButton',{key:action,attrs:{\"label\":action},on:{\"click\":function($event){return _vm.processSave(action)}}})]})],2):_vm._e()]:(!_vm.isPreview)?[_c('div',{staticClass:\"actions\"},[_c('BaseButton',{attrs:{\"label\":\"save\"},on:{\"click\":_vm.save}})],1)]:_vm._e()],2)]:_vm._e()],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","<template>\n  <div id=\"render-form\">\n    <Tabs\n      v-if=\"formSettings.general.layout === 'TAB'\"\n      :value=\"activePanel\"\n      :tabs=\"_tabs\"\n      class=\"q-mb-lg\"\n      @input=\"changePanelTab\"\n    />\n\n    <BaseScrollbar :style=\"height ? 'max-height:' + height : ''\">\n      <!-- panels -->\n\n      <ValidationObserver ref=\"form\">\n        <template v-for=\"panel in _panels\">\n          <RenderPanel\n            v-if=\"checkVisibility(panel.id)\"\n            :key=\"panel.id\"\n            :form-id=\"formId\"\n            :title=\"panel.settings.title\"\n            :description=\"panel.settings.description\"\n            :fields=\"panel.fields\"\n            :form-controls=\"formControls\"\n            :fields-model=\"_fieldsModel\"\n            :secondary-panels=\"secondaryPanels\"\n            :form-settings=\"formSettings\"\n            :no-padding=\"noPadding\"\n            :is-readonly=\"isReadonly\"\n            :form-edit-controls=\"formEditControls\"\n            :readonly-controls=\"readonlyControls\"\n            :form-visibility-access=\"formVisibilityAccess\"\n            :form-secure-controls=\"formSecureControls\"\n            :edit-panel-controls=\"checkEditControls(panel.id)\"\n            :enable-controls=\"enableControls\"\n            :visible-controls.sync=\"visibleControls\"\n            :data-validation-values=\"dataValidationValues\"\n            :form-upload-files=\"formUploadFiles\"\n            :ocr-result=\"ocrResult\"\n            :external-link=\"externalLink\"\n            :portal-id=\"portalId\"\n            :form-view=\"formSettings.general.layout\"\n            class=\"q-mb-md\"\n            @mandatoryControls=\"setMandatoryControls\"\n            @uploadFiles=\"uploadFiles\"\n            @deletedFiles=\"deletedFiles\"\n            @setReadonlyControls=\"setReadonlyControls\"\n            @formSaveType=\"formSaveType\"\n            @loading=\"externalLoading\"\n            @showQr=\"showQr\"\n          >\n          </RenderPanel>\n        </template>\n      </ValidationObserver>\n\n      <!-- ... -->\n    </BaseScrollbar>\n\n    <template v-if=\"!isReadonly || formSettings.general.layout === 'CARD'\">\n      <!-- card layout's actions -->\n\n      <div\n        v-if=\"formSettings.general.layout === 'CARD'\"\n        class=\"actions\"\n        :style=\"workflowFormModel ? ' justify-content: center' : ''\"\n      >\n        <BaseButton\n          v-if=\"activePanel !== 0\"\n          label=\"previous\"\n          is-flat\n          class=\"q-mr-sm\"\n          @click=\"previous\"\n        />\n\n        <BaseButton\n          v-if=\"activePanel !== panelCount - 1 && checkNextAction\"\n          label=\"next\"\n          class=\"q-mr-md\"\n          @click=\"next\"\n        />\n        <template\n          v-if=\"\n            activePanel === panelCount - 1 &&\n            formSettings.general.type !== 'WORKFLOW'\n          \"\n        >\n          <BaseButton label=\"save\" @click=\"save\" />\n        </template>\n        <template\n          v-else-if=\"\n            activePanel === panelCount - 1 &&\n            formSettings.general.type === 'WORKFLOW'\n          \"\n        >\n          <template v-for=\"action in workflowActions\">\n            <BaseButton\n              :key=\"action\"\n              :label=\"action\"\n              @click=\"processSave(action)\"\n            />\n          </template>\n        </template>\n      </div>\n\n      <!-- ... -->\n\n      <!-- actions -->\n      <div v-else>\n        <template v-if=\"formSettings.general.type === 'WORKFLOW'\">\n          <div v-if=\"workflowActions.length\" class=\"actions\">\n            <template v-for=\"action in workflowActions\">\n              <BaseButton\n                :key=\"action\"\n                :label=\"action\"\n                @click=\"processSave(action)\"\n              />\n            </template>\n          </div>\n        </template>\n        <template v-else-if=\"!isPreview\">\n          <div class=\"actions\">\n            <BaseButton label=\"save\" @click=\"save\" />\n          </div>\n        </template>\n      </div>\n\n      <!-- ... -->\n    </template>\n  </div>\n</template>\n\n<script>\nimport Tabs from \"@/components/common/tabs/Tabs2.vue\";\nimport { ValidationObserver } from \"vee-validate\";\nimport FieldsModelMixin from \"./mixins/fields-model.js\";\nimport { has, merge } from \"lodash-es\";\nimport { evaluateFormula } from \"@/helpers/formula.js\";\n// import { cloneDeep } from \"lodash-es\";\n\nexport default {\n  name: \"RenderForm\",\n\n  components: {\n    Tabs,\n    ValidationObserver,\n  },\n\n  mixins: [FieldsModelMixin],\n\n  props: {\n    isPreview: {\n      type: Boolean,\n      default: false,\n    },\n\n    formId: {\n      type: String,\n      default: \"0\",\n    },\n\n    formSettings: {\n      type: Object,\n      required: true,\n    },\n\n    panels: {\n      type: Array,\n      required: true,\n    },\n\n    secondaryPanels: {\n      type: Array,\n      default: () => [],\n    },\n\n    formModel: {\n      type: Object,\n      default: () => {},\n    },\n\n    noPadding: {\n      type: Boolean,\n      default: false,\n    },\n\n    isReadonly: {\n      type: Boolean,\n      default: false,\n    },\n\n    saveAction: {\n      type: String,\n      default: \"\",\n    },\n\n    workflowFormModel: {\n      type: Object,\n      default: () => {},\n    },\n\n    workflowActions: {\n      type: Array,\n      default: () => [],\n    },\n\n    formEditControls: {\n      type: Array,\n      default: () => [],\n    },\n\n    readonlyControls: {\n      type: Array,\n      default: () => [],\n    },\n\n    formVisibilityAccess: {\n      type: Boolean,\n      default: true,\n    },\n\n    formSecureControls: {\n      type: Array,\n      default: () => [],\n    },\n\n    enableControls: {\n      type: Object,\n      default: () => {},\n    },\n\n    checkList: {\n      type: Array,\n      default: () => [],\n    },\n\n    formFields: {\n      type: Array,\n      default: () => [],\n    },\n\n    dataValidationValues: {\n      type: Array,\n      default: () => [],\n    },\n\n    formCheckList: {\n      type: Boolean,\n      default: false,\n    },\n\n    formUploadFiles: {\n      type: Array,\n      default: () => [],\n    },\n\n    hasCheckFormValidate: {\n      type: Boolean,\n      default: false,\n    },\n\n    ocrResult: {\n      type: Array,\n      default: () => [],\n    },\n\n    height: {\n      type: String,\n      default: \"\",\n    },\n\n    externalLink: {\n      type: Boolean,\n      default: false,\n    },\n\n    portalId: {\n      type: Number,\n      default: 0,\n    },\n  },\n\n  data() {\n    return {\n      activePanel: 0,\n      fieldsModel: {},\n      calculatedFieldsModel: {},\n      visibleControls: [],\n      formControls: [],\n      mandatoryControls: [],\n      mandatoryControlsList: {},\n      readonlyControlsList: [],\n      checkNextAction: true,\n    };\n  },\n\n  computed: {\n    _tabs() {\n      let tabList = [];\n      this.panels.forEach((panel, idx) => {\n        if (this.formSecureControls.length) {\n          if (typeof this.formSecureControls[0] === \"object\") {\n            let hasEmail = this.formSecureControls.find(\n              (item) => item.userId === this.$store.state.session.id\n            );\n            if (hasEmail && hasEmail.formFields.length) {\n              if (!hasEmail.formFields.includes(panel.id)) {\n                const label = panel.settings.title || `Panel ${idx + 1}`;\n\n                tabList.push({\n                  id: this.$nano.id(),\n                  label: label,\n                  value: idx,\n                });\n                if (tabList.length === 1) {\n                  this.activePanel = tabList[0].value;\n                }\n              }\n            } else {\n              const label = panel.settings.title || `Panel ${idx + 1}`;\n\n              tabList.push({\n                id: this.$nano.id(),\n                label: label,\n                value: idx,\n              });\n              if (tabList.length === 1) {\n                this.activePanel = tabList[0].value;\n              }\n            }\n          } else {\n            if (!this.formSecureControls.includes(panel.id)) {\n              const label = panel.settings.title || `Panel ${idx + 1}`;\n\n              tabList.push({\n                id: this.$nano.id(),\n                label: label,\n                value: idx,\n              });\n              if (tabList.length === 1) {\n                this.activePanel = tabList[0].value;\n              }\n            }\n          }\n        } else {\n          const label = panel.settings.title || `Panel ${idx + 1}`;\n\n          tabList.push({\n            id: this.$nano.id(),\n            label: label,\n            value: idx,\n          });\n          if (tabList.length === 1) {\n            this.activePanel = tabList[0].value;\n          }\n        }\n      });\n\n      return tabList;\n    },\n\n    _panels() {\n      if (this.formSettings.general.layout === \"CLASSIC\") {\n        return this.panels;\n      }\n      return [this.panels[this.activePanel]];\n    },\n\n    _fieldsModel() {\n      return merge(this.fieldsModel, this.calculatedFieldsModel);\n    },\n\n    _formModel() {\n      let model = {};\n      if (this.formModel) {\n        if (Object.keys(this.formModel).length) {\n          if (!this.panels.length) {\n            return;\n          }\n\n          this.panels.forEach((panel) => {\n            if (!panel.fields.length) {\n              return;\n            }\n\n            // for (let field of panel.fields) {\n            //   model[field.id] = this.isArrayField(field.type)\n            //     ? JSON.parse(this.formModel[field.id])\n            //     : this.formModel[field.id];\n            // }\n            for (let field of panel.fields) {\n              if (!this.isStatelessField(field.type)) {\n                if (this.isArrayField(field.type)) {\n                  if (this.formModel[field.id]) {\n                    try {\n                      model[field.id] = JSON.parse(this.formModel[field.id]);\n                    } catch (e) {\n                      model[field.id] = this.formModel[field.id];\n                    }\n                  } else {\n                    model[field.id] = [];\n                  }\n                } else if (\n                  field.type === \"COUNTER\" ||\n                  field.type === \"CALCULATED\"\n                ) {\n                  model[field.id] = Number(this.formModel[field.id]);\n                } else {\n                  model[field.id] = this.formModel[field.id] || \"\";\n                }\n                // model[field.id] = this.isArrayField(field.type)\n                //   ? this.formModel[field.id].length\n                //     ? JSON.parse(this.formModel[field.id])\n                //     : []\n                //   : this.formModel[field.id];\n                if (this.enableControls) {\n                  if (Object.keys(this.enableControls).length) {\n                    if (this.enableControls.controls.length) {\n                      let index = this.enableControls.controls.findIndex(\n                        (row) => row.id === field.id\n                      );\n                      if (index > -1) {\n                        this.enableControls.controls[\n                          index\n                        ].parentControls.forEach((control) => {\n                          if (control.value === this.formModel[field.id]) {\n                            if (control.childControls.length) {\n                              this.visibleControls.push(\n                                ...control.childControls\n                              );\n                            }\n                          }\n                        });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          });\n\n          let _model = { ...this.formModel, ...model };\n\n          return _model;\n        }\n      }\n\n      return model;\n    },\n\n    panelCount() {\n      let panelsCount = 0;\n      this.panels.forEach((panel) => {\n        // if (!this.formSecureControls.includes(panel.id)) {\n        //   panelsCount += 1;\n        // }\n        if (this.formSecureControls.length) {\n          if (typeof this.formSecureControls[0] === \"object\") {\n            let hasEmail = this.formSecureControls.find(\n              (item) => item.userId === this.$store.state.session.id\n            );\n            if (hasEmail && hasEmail.formFields.length) {\n              if (!hasEmail.formFields.includes(panel.id)) {\n                panelsCount += 1;\n              }\n            }\n          } else {\n            if (!this.formSecureControls.includes(panel.id)) {\n              panelsCount += 1;\n            }\n          }\n        } else {\n          panelsCount += 1;\n        }\n      });\n      return panelsCount;\n    },\n  },\n\n  watch: {\n    fieldsModel: {\n      immediate: true,\n      deep: true,\n      handler() {\n        this.formControls = [];\n        const rules = this.formSettings.rules;\n        this.panels.forEach((panel) => {\n          this.formControls.push(...panel.fields);\n        });\n        let filledValue = 0;\n        let nonFilledValue = 0;\n        this.formControls.forEach((control) => {\n          if (this.checkVisibility(control.id)) {\n            if (\n              control.settings.validation.fieldRule === \"REQUIRED\" &&\n              control.settings.general.visibility === \"NORMAL\"\n            ) {\n              if (control.settings.validation.answerIndicator === \"YES\") {\n                if (Array.isArray(this._fieldsModel[control.id])) {\n                  if (this._fieldsModel[control.id].length) {\n                    filledValue += 1;\n                  } else {\n                    nonFilledValue += 1;\n                  }\n                } else if (this._fieldsModel[control.id] === \"<p></p>\") {\n                  if (this.removeTags(this._fieldsModel[control.id])) {\n                    filledValue += 1;\n                  } else {\n                    nonFilledValue += 1;\n                  }\n                } else if (this._fieldsModel[control.id]) {\n                  filledValue += 1;\n                } else {\n                  nonFilledValue += 1;\n                }\n              }\n            }\n          }\n        });\n        this.mandatoryControlsList = {\n          filledValue: filledValue,\n          nonFilledValue: nonFilledValue,\n        };\n        this.$emit(\"mandatoryControlsList\", this.mandatoryControlsList);\n        for (const rule of rules) {\n          let proceed = true;\n          if (rule.isConditionalRule) {\n            proceed = false;\n            for (const condition of rule.conditions) {\n              switch (condition.logic) {\n                case \"IS_EQUALS_TO (=)\":\n                  if (this.fieldsModel[condition.name] === condition.value) {\n                    proceed = true;\n                  }\n                  break;\n              }\n            }\n          }\n          if (proceed) {\n            let fields = [];\n            this.panels.forEach((panel) => {\n              if (!panel.fields.length) {\n                return;\n              }\n              for (let field of panel.fields) {\n                fields.push(field);\n              }\n            });\n            const calculations = rule.calculations;\n            for (const calculation of calculations) {\n              if (has(this.calculatedFieldsModel, calculation.fieldId)) {\n                let calcValue = evaluateFormula(\n                  calculation.formula,\n                  this.fieldsModel,\n                  fields\n                );\n                //if (calcValue) {\n                if (typeof calcValue === \"number\") {\n                  this.calculatedFieldsModel[calculation.fieldId] =\n                    calcValue === 0 ? 0 : parseFloat(calcValue.toFixed(2));\n                }\n                //}\n                // else {\n                //   this.calculatedFieldsModel[calculation.fieldId] = 0\n                // }\n              }\n            }\n          }\n        }\n        if (this.enableControls) {\n          if (this.enableControls.listControls.length) {\n            this.checkNextAction = true;\n            let currentPanel = false;\n            let proceedPanel = true;\n            this.panels.forEach((panel) => {\n              if (currentPanel && proceedPanel) {\n                if (this.enableControls.listControls.indexOf(panel.id) > -1) {\n                  this.checkNextAction = false;\n                  if (this.visibleControls.indexOf(panel.id) > -1) {\n                    console.log(panel.id);\n                    this.checkNextAction = true;\n                    proceedPanel = false;\n                  }\n                } else {\n                  this.checkNextAction = true;\n                  proceedPanel = false;\n                }\n              }\n              if (panel.id === this.panels[this.activePanel].id) {\n                currentPanel = true;\n              }\n            });\n          }\n        }\n      },\n    },\n\n    activePanel: {\n      immediate: true,\n      deep: true,\n      handler() {\n        if (this.enableControls) {\n          if (this.enableControls.listControls.length) {\n            this.checkNextAction = true;\n            let currentPanel = false;\n            let proceedPanel = true;\n            this.panels.forEach((panel) => {\n              if (currentPanel && proceedPanel) {\n                if (this.enableControls.listControls.indexOf(panel.id) > -1) {\n                  this.checkNextAction = false;\n                  if (this.visibleControls.indexOf(panel.id) > -1) {\n                    console.log(panel.id);\n                    this.checkNextAction = true;\n                    proceedPanel = false;\n                  }\n                } else {\n                  this.checkNextAction = true;\n                  proceedPanel = false;\n                }\n              }\n              if (panel.id === this.panels[this.activePanel].id) {\n                currentPanel = true;\n              }\n            });\n          }\n        }\n      },\n    },\n\n    saveAction: {\n      immediate: true,\n      async handler() {\n        if (this.saveAction) {\n          if (this.saveAction === \"Save\" || this.saveAction === \"Force Close\") {\n            this.$emit(\"update:workflowFormModel\", this._fieldsModel);\n            return;\n          }\n\n          var nonFilledValue = [];\n          var nonFilledId = [];\n\n          this.formFields.forEach((field) => {\n            if (this.checkVisibility(field.value)) {\n              if (field.settings.validation.fieldRule === \"REQUIRED\") {\n                if (!this._fieldsModel[field.value]) {\n                  nonFilledValue.push(field.label);\n                  nonFilledId.push(field.value);\n                }\n              }\n            }\n          });\n\n          // console.log(nonFilledValue, nonFilledId);\n          let validation = true;\n\n          nonFilledId.forEach((ids) => {\n            if (validation) {\n              this.panels.forEach((panel, index) => {\n                let fields = panel.fields.findIndex((field) => {\n                  return field.id === ids;\n                });\n\n                if (fields >= 0) {\n                  validation = false;\n\n                  this.activePanel = index;\n                }\n              });\n            }\n          });\n\n          if (!nonFilledValue.length) {\n            const isValid = await this.$refs.form.validate();\n            if (!isValid) {\n              let errorList = [];\n              this.formControls.forEach((field) => {\n                if (\n                  this.$refs.form.errors[field.label] &&\n                  this.$refs.form.errors[field.label].length\n                ) {\n                  errorList.push(field.label);\n                }\n              });\n              this.$alert.warning(\"Required Mandatory Info\", errorList);\n\n              this.$emit(\"update:saveAction\", \"\");\n              this.$emit(\"update:workflowFormModel\", {});\n              return;\n            } else {\n              // if (this.panelCount > this.activePanel) {\n              //   this.activePanel = this.activePanel + 1;\n              //   const isValid1 = await this.$refs.form.validate();\n              //   console.log(this.$refs.form, isValid1);\n              //   if (!isValid1) {\n              //     this.$emit(\"update:saveAction\", \"\");\n              //     this.$emit(\"update:workflowFormModel\", {});\n              //   }\n              // }\n            }\n            this.$emit(\"update:workflowFormModel\", this._fieldsModel);\n          } else {\n            const isValid = await this.$refs.form.validate();\n\n            const isValid1 = await this.$refs.form.validate();\n\n            this.$alert.warning(\"Required Mandatory Info\", nonFilledValue);\n\n            this.$emit(\"update:saveAction\", \"\");\n            this.$emit(\"update:workflowFormModel\", {});\n            if (!isValid || !isValid1) {\n              return;\n            }\n          }\n        }\n      },\n    },\n\n    _fieldsModel: {\n      deep: true,\n      immediate: true,\n      handler() {\n        this.$emit(\"update:workflowModel\", this._fieldsModel);\n        if (this.checkList.length) {\n          this.checkDocument();\n          let origin = location.origin;\n          if (\n            origin === \"https://ag-appsvc01.azurewebsites.net\" ||\n            origin === \"https://ag-appsvc05.azurewebsites.net\" ||\n            (origin === \"https://trial.ezofis.com\" &&\n              this.$store.state.session.tenantId === 12)\n          ) {\n            this.documentValidation();\n          }\n        }\n      },\n    },\n\n    formCheckList: {\n      immediate: true,\n      deep: true,\n      handler() {\n        if (this.formCheckList) {\n          let origin = location.origin;\n          if (\n            (origin === \"https://ag-appsvc01.azurewebsites.net\" ||\n              origin === \"https://ag-appsvc05.azurewebsites.net\" ||\n              (origin === \"https://trial.ezofis.com\" &&\n                this.$store.state.session.tenantId === 12)) &&\n            this.checkList.length\n          ) {\n            this.documentValidation();\n            this.$emit(\"update:formCheckList\", false);\n          }\n        }\n      },\n    },\n\n    hasCheckFormValidate: {\n      deep: true,\n      async handler() {\n        if (this.hasCheckFormValidate) {\n          const isValid = await this.$refs.form.validate();\n\n          let errorList = [];\n          this.formControls.forEach((field) => {\n            if (\n              this.$refs.form.errors[field.label] &&\n              this.$refs.form.errors[field.label].length\n            ) {\n              errorList.push(field.label);\n            }\n          });\n          this.$alert.warning(\"Required Mandatory Info\", errorList);\n          this.$emit(\"update:hasCheckFormValidate\", false);\n          if (!isValid) {\n            return;\n          }\n        }\n      },\n    },\n  },\n\n  created() {\n    this.fieldsModel = merge(this.fieldsModel, this._formModel);\n  },\n\n  methods: {\n    checkVisibility(fieldId) {\n      if (this.enableControls) {\n        let index = this.enableControls.listControls.findIndex(\n          (row) => row === fieldId\n        );\n        let showControlIndex = this.visibleControls.findIndex(\n          (row) => row === fieldId\n        );\n        if (index > -1 && showControlIndex < 0) {\n          return false;\n        }\n      } else if (this.formVisibilityAccess) {\n        return true;\n      } else if (this.formSecureControls.length === 0) {\n        return true;\n      }\n\n      if (typeof this.formSecureControls[0] === \"object\") {\n        let hasEmail = this.formSecureControls.find(\n          (item) => item.userId === this.$store.state.session.id\n        );\n        if (hasEmail && hasEmail.formFields.length) {\n          return !hasEmail.formFields.includes(fieldId);\n        } else {\n          return true;\n        }\n      } else {\n        return !this.formSecureControls.includes(fieldId);\n      }\n\n      //return !this.formSecureControls.includes(fieldId);\n    },\n\n    isJsonString(str) {\n      try {\n        JSON.parse(str);\n      } catch (e) {\n        return false;\n      }\n      return true;\n    },\n\n    checkEditControls(fieldId) {\n      if (this.isReadonly) {\n        return this.isReadonly;\n      } else if (this.formEditControls.length === 0) {\n        return false;\n      }\n      // console.log(fieldId, typeof this.formEditControls[0]);\n      if (\n        typeof this.formEditControls === \"object\" ||\n        typeof this.formEditControls[0] === \"string\"\n      ) {\n        // console.log(this.formEditControls);\n        let formEditControls = [];\n        let singleEditControl = [];\n        if (typeof this.formEditControls[0] === \"object\") {\n          formEditControls = this.formEditControls;\n        } else {\n          this.formEditControls.forEach((edit) => {\n            if (typeof edit === \"string\") {\n              if (this.isJsonString(edit)) {\n                formEditControls.push(JSON.parse(edit));\n              } else {\n                singleEditControl.push(edit);\n              }\n            }\n          });\n        }\n        if (formEditControls.length) {\n          // console.log(formEditControls);\n          let hasEmail = formEditControls.find(\n            (item) => item.userId === this.$store.state.session.id\n          );\n          // console.log(fieldId);\n          // console.log(hasEmail, hasEmail.formFields);\n          if (hasEmail && hasEmail.formFields.length) {\n            // console.log(hasEmail.formFields.includes(fieldId));\n            let formfields = [];\n            hasEmail.formFields.forEach((form) => {\n              let table = form.split(\"@\");\n              // console.log(table);\n              if (table.length === 2) {\n                // console.log(table[0].trim(), fieldId);\n                if (table[0].trim() === fieldId) {\n                  // return true;\n                  formfields.push(table[0].trim());\n                }\n              } else {\n                if (form === fieldId) {\n                  // return true;\n                  formfields.push(form);\n                } else {\n                  // return false;\n                }\n              }\n            });\n            // console.log(formfields);\n            if (formfields.length) {\n              return formfields.includes(fieldId);\n            } else {\n              return false;\n            }\n          } else {\n            return false;\n          }\n        } else if (singleEditControl.length) {\n          // console.log(singleEditControl);\n          return singleEditControl.includes(fieldId);\n        }\n      } else {\n        return this.formEditControls.includes(fieldId);\n      }\n      //return this.formEditControls.includes(fieldId);\n    },\n\n    async previous() {\n      this.activePanel -= 1;\n      this.panels\n        .slice()\n        .reverse()\n        .forEach((panel) => {\n          if (this.panels[this.activePanel].id === panel.id) {\n            if (this.formSecureControls.includes(panel.id)) {\n              this.activePanel -= 1;\n            } else if (this.enableControls) {\n              if (this.enableControls.listControls.includes(panel.id)) {\n                if (!this.visibleControls.includes(panel.id)) {\n                  this.activePanel -= 1;\n                }\n              }\n            }\n          }\n        });\n    },\n\n    async next() {\n      if (!this.isPreview) {\n        const isValid = await this.$refs.form.validate();\n\n        if (!isValid) {\n          let errorList = [];\n          this.formControls.forEach((field) => {\n            if (\n              this.$refs.form.errors[field.label] &&\n              this.$refs.form.errors[field.label].length\n            ) {\n              errorList.push(field.label);\n            }\n          });\n          this.$alert.warning(\"Required Mandatory Info\", errorList);\n\n          return;\n        }\n      }\n      this.activePanel += 1;\n      this.panels.forEach((panel) => {\n        if (this.panels[this.activePanel].id === panel.id) {\n          if (this.formSecureControls.includes(panel.id)) {\n            this.activePanel += 1;\n          } else if (this.enableControls) {\n            if (this.enableControls.listControls.includes(panel.id)) {\n              if (!this.visibleControls.includes(panel.id)) {\n                this.activePanel += 1;\n              }\n            }\n          }\n        }\n      });\n    },\n\n    async save() {\n      const isValid = await this.$refs.form.validate();\n\n      if (!isValid) {\n        let errorList = [];\n        this.formControls.forEach((field) => {\n          if (\n            this.$refs.form.errors[field.label] &&\n            this.$refs.form.errors[field.label].length\n          ) {\n            errorList.push(field.label);\n          }\n        });\n        this.$alert.warning(\"Required Mandatory Info\", errorList);\n\n        return;\n      }\n\n      this.$emit(\"save\", this._fieldsModel);\n    },\n\n    isArrayField(fieldType) {\n      return [\"MULTIPLE_CHOICE\", \"FILE_UPLOAD\", \"MULTI_SELECT\"].includes(\n        fieldType\n      );\n    },\n\n    isStatelessField(fieldType) {\n      return [\"LABEL\", \"DIVIDER\", \"PARAGRAPH\"].includes(fieldType);\n    },\n\n    async processSave(value) {\n      const isValid = await this.$refs.form.validate();\n\n      if (!isValid) {\n        let errorList = [];\n        this.formControls.forEach((field) => {\n          if (\n            this.$refs.form.errors[field.label] &&\n            this.$refs.form.errors[field.label].length\n          ) {\n            errorList.push(field.label);\n          }\n        });\n        this.$alert.warning(\"Required Mandatory Info\", errorList);\n\n        this.$emit(\"update:saveAction\", \"\");\n        this.$emit(\"update:workflowFormModel\", {});\n        return;\n      }\n      this.$emit(\"update:saveAction\", value);\n      this.$emit(\"update:workflowFormModel\", this._fieldsModel);\n    },\n\n    checkDocument() {\n      this.checkList.forEach((doc) => {\n        if (doc.conditions) {\n          if (doc.conditions.length) {\n            doc.required = false;\n            doc.conditions.forEach((condition) => {\n              if (doc.groupLogic === \"ANY\" && doc.required) {\n                return;\n              }\n              let fieldType =\n                this.formFields.find((field) => field.value === condition.name)\n                  ?.type || \"\";\n              let conditionValue = condition.value;\n              let fieldValue = this.fieldsModel[condition.name];\n              if (fieldType === \"NUMBER\") {\n                conditionValue = Number(conditionValue);\n                fieldValue = Number(fieldValue);\n              }\n              switch (condition.logic) {\n                case \"IS_EQUALS_TO\":\n                  if (fieldValue === conditionValue) {\n                    doc.required = true;\n                  } else {\n                    doc.required = false;\n                  }\n                  break;\n                case \"IS_NOT_EQUALS_TO\":\n                  if (fieldValue !== conditionValue) {\n                    doc.required = true;\n                  } else {\n                    doc.required = false;\n                  }\n                  break;\n                case \"CONTAINS\":\n                  if (fieldValue.indexOf(conditionValue) > -1) {\n                    doc.required = true;\n                  } else {\n                    doc.required = false;\n                  }\n                  break;\n                case \"IS_GREATER_THAN\":\n                  if (fieldValue > conditionValue) {\n                    doc.required = true;\n                  } else {\n                    doc.required = false;\n                  }\n                  break;\n                case \"IS_GREATER_THAN_OR_EQUALS_TO\":\n                  if (fieldValue >= conditionValue) {\n                    doc.required = true;\n                  } else {\n                    doc.required = false;\n                  }\n                  break;\n                case \"IS_LESSER_THAN\":\n                  if (fieldValue < conditionValue) {\n                    doc.required = true;\n                  } else {\n                    doc.required = false;\n                  }\n                  break;\n                case \"IS_LESSER_THAN_OR_EQUALS_TO\":\n                  if (fieldValue <= conditionValue) {\n                    doc.required = true;\n                  } else {\n                    doc.required = false;\n                  }\n                  break;\n              }\n            });\n            if (doc.required || doc.visible) {\n              doc.show = true;\n            } else {\n              doc.show = false;\n            }\n          } else {\n            doc.show = true;\n          }\n        } else {\n          doc.show = true;\n        }\n        return doc;\n      });\n    },\n\n    documentValidation() {\n      if (this._fieldsModel[\"74jNpB8IDZ3hVN_mGNy8K\"]) {\n        let attachDocs = this.checkList.filter((doc) => doc.attach);\n        if (attachDocs.length) {\n          attachDocs.forEach((doc) => {\n            if (\n              this._fieldsModel[\"74jNpB8IDZ3hVN_mGNy8K\"].indexOf(doc.name) ===\n              -1\n            ) {\n              this._fieldsModel[\"74jNpB8IDZ3hVN_mGNy8K\"].push(doc.name);\n            }\n          });\n        }\n      }\n    },\n\n    setMandatoryControls(controls, settings, immediate, fieldId) {\n      if (controls.length) {\n        controls.forEach((item) => {\n          for (let i = 0; i < this.panelCount; i++) {\n            let index = this.panels[i].fields.findIndex((control) => {\n              return control.id === item;\n            });\n            if (index > -1) {\n              // let alreadyIndex = this.mandatoryControls.findIndex((element) => {\n              //   return element.id === item;\n              // });\n\n              // if (alreadyIndex === -1) {\n              if (\n                this.panels[i].fields[index].settings.validation.fieldRule ===\n                \"OPTIONAL\"\n              ) {\n                this.panels[i].fields[index].settings.validation.fieldRule =\n                  \"REQUIRED\";\n                this.mandatoryControls.push({\n                  panelIndex: i,\n                  fieldsIndex: index,\n                  id: item,\n                  fieldId: fieldId,\n                });\n              } else {\n                this.mandatoryControls.push({\n                  panelIndex: i,\n                  fieldsIndex: index,\n                  id: item,\n                  value: \"required\",\n                  fieldId: fieldId,\n                });\n              }\n              // } else {\n              //   // this.panels[i].fields[index].settings.validation.fieldRule =\n              //   //   \"OPTIONAL\";\n              // }\n            }\n          }\n        });\n\n        this.mandatoryControls.forEach((element) => {\n          if (fieldId === element.fieldId) {\n            let alreadyIndex = controls.findIndex((control) => {\n              return element.id === control;\n            });\n\n            if (alreadyIndex === -1) {\n              this.panels[element.panelIndex].fields[\n                element.fieldsIndex\n              ].settings.validation.fieldRule = \"OPTIONAL\";\n            }\n          }\n        });\n      } else {\n        if (this.mandatoryControls.length) {\n          this.mandatoryControls.forEach((control) => {\n            if (!control.value && fieldId === control.fieldId) {\n              this.panels[control.panelIndex].fields[\n                control.fieldsIndex\n              ].settings.validation.fieldRule = \"OPTIONAL\";\n            }\n          });\n          this.mandatoryControls = [];\n        }\n        if (!immediate) {\n          let fields = [];\n          settings.forEach((set) => {\n            fields.push(...set.controls);\n          });\n          fields.forEach((field) => {\n            for (let i = 0; i < this.panelCount; i++) {\n              let index = this.panels[i].fields.findIndex((control) => {\n                return control.id === field;\n              });\n\n              if (index > -1) {\n                if (\n                  this.panels[i].fields[index].settings.validation.fieldRule ===\n                  \"REQUIRED\"\n                ) {\n                  this.panels[i].fields[index].settings.validation.fieldRule =\n                    \"OPTIONAL\";\n                }\n              }\n            }\n          });\n        }\n      }\n    },\n\n    uploadFiles(value, controls, fieldId, aiSettings) {\n      this.$emit(\"uploadFiles\", value, controls, fieldId, aiSettings);\n    },\n\n    deletedFiles(ids, files) {\n      this.$emit(\"deletedFiles\", ids, files);\n    },\n\n    removeTags(value) {\n      if (!value) return \"\";\n      return value.replace(/(<([^>]+)>)/gi, \"\");\n    },\n\n    setReadonlyControls(controls, settings, immediate, fieldId) {\n      if (controls.length) {\n        controls.forEach((item) => {\n          for (let i = 0; i < this.panelCount; i++) {\n            let index = this.panels[i].fields.findIndex((control) => {\n              return control.id === item;\n            });\n            if (index > -1) {\n              if (\n                this.panels[i].fields[index].settings.general.visibility !==\n                \"READ_ONLY\"\n              ) {\n                this.panels[i].fields[index].settings.general.visibility =\n                  \"READ_ONLY\";\n                this.fieldsModel[this.panels[i].fields[index].id] = \"\";\n\n                this.readonlyControlsList.push({\n                  panelIndex: i,\n                  fieldsIndex: index,\n                  id: item,\n                  fieldId: fieldId,\n                });\n              } else {\n                this.readonlyControlsList.push({\n                  panelIndex: i,\n                  fieldsIndex: index,\n                  id: item,\n                  value: \"required\",\n                  fieldId: fieldId,\n                });\n              }\n            }\n          }\n        });\n\n        this.readonlyControlsList.forEach((element) => {\n          if (fieldId === element.fieldId) {\n            let alreadyIndex = controls.findIndex((control) => {\n              return element.id === control;\n            });\n\n            if (alreadyIndex === -1) {\n              this.panels[element.panelIndex].fields[\n                element.fieldsIndex\n              ].settings.general.visibility = \"NORMAL\";\n\n              this.fieldsModel[\n                this.panels[element.panelIndex].fields[element.fieldsIndex].id\n              ] = \"\";\n            }\n          }\n        });\n      } else {\n        if (this.readonlyControlsList.length) {\n          this.readonlyControlsList.forEach((control) => {\n            if (!control.value && fieldId === control.fieldId) {\n              this.panels[control.panelIndex].fields[\n                control.fieldsIndex\n              ].settings.general.visibility = \"NORMAL\";\n\n              this.fieldsModel[\n                this.panels[control.panelIndex].fields[control.fieldsIndex].id\n              ] = \"\";\n            }\n          });\n          this.readonlyControlsList = [];\n        }\n\n        if (!immediate) {\n          let fields = [];\n          settings.forEach((set) => {\n            fields.push(...set.controls);\n          });\n          fields.forEach((field) => {\n            for (let i = 0; i < this.panelCount; i++) {\n              let index = this.panels[i].fields.findIndex((control) => {\n                return control.id === field;\n              });\n\n              if (index > -1) {\n                if (\n                  this.panels[i].fields[index].settings.general.visibility ===\n                  \"READ_ONLY\"\n                ) {\n                  this.panels[i].fields[index].settings.general.visibility =\n                    \"NORMAL\";\n                  this.fieldsModel[this.panels[i].fields[index].id] = \"\";\n                }\n              }\n            }\n          });\n        }\n      }\n    },\n\n    async changePanelTab(value) {\n      if (this.formSettings.general.layout === \"TAB\") {\n        const isValid = await this.$refs.form.validate();\n        console.log(isValid);\n\n        let errorList = [];\n        this.formControls.forEach((field) => {\n          if (\n            this.$refs.form.errors[field.label] &&\n            this.$refs.form.errors[field.label].length\n          ) {\n            if (errorList.indexOf(field.label) === -1) {\n              errorList.push(field.label);\n            }\n          }\n        });\n        console.log(errorList, \"errorList\");\n\n        if (errorList.length) {\n          this.$alert.warning(\"Required Mandatory Info\", errorList);\n        }\n\n        if (!isValid) {\n          return;\n        } else {\n          this.activePanel = value;\n        }\n      }\n    },\n\n    showQr(id) {\n      this.$emit(\"showQr\", id);\n    },\n\n    formSaveType(type, itemId) {\n      this.$emit(\"formSaveType\", type, itemId);\n    },\n\n    externalLoading(loading) {\n      this.$emit(\"update:externalLoading\", loading);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#render-form {\n  .actions {\n    padding: 16px 0px;\n    display: flex;\n    justify-content: flex-end;\n  }\n}\n</style>\n","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vue-cli-plugin-quasar/lib/loader.transform-quasar-imports.js!../../../../node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-1!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RenderForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vue-cli-plugin-quasar/lib/loader.transform-quasar-imports.js!../../../../node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-1!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RenderForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./RenderForm.vue?vue&type=template&id=218fb81c&scoped=true&\"\nimport script from \"./RenderForm.vue?vue&type=script&lang=js&\"\nexport * from \"./RenderForm.vue?vue&type=script&lang=js&\"\nimport style0 from \"./RenderForm.vue?vue&type=style&index=0&id=218fb81c&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"218fb81c\",\n  null\n  \n)\n\nexport default component.exports","import isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default toKey;\n","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../node_modules/style-resources-loader/lib/index.js??ref--9-oneOf-1-4!../../../../node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-1!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RenderForm.vue?vue&type=style&index=0&id=218fb81c&prod&lang=scss&scoped=true&\"","import isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nexport default isKey;\n"],"sourceRoot":""}